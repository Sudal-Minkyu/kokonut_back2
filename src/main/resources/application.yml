server:
  port: 8050
  
# JPA Setting
spring:
  datasource:
    kokonut:
      url: jdbc:mariadb://${DOCKER_DB_HOST}:${DOCKER_DB_PORT}/${KOKONUT_DB_DBNAME}
      driver-class-name: org.mariadb.jdbc.Driver
      username: ${DOCKER_DB_USERNAME}
      password: ${DOCKER_DB_PASSWORD}
    kokonut-user:
      url: jdbc:mariadb://${DOCKER_DB_HOST}:${DOCKER_DB_PORT}/${KOKONUT_DB_USER}
      driver-class-name: org.mariadb.jdbc.Driver
      username: ${DOCKER_DB_USERNAME}
      password: ${DOCKER_DB_PASSWORD}
    kokonut-dormant:
      url: jdbc:mariadb://${DOCKER_DB_HOST}:${DOCKER_DB_PORT}/${KOKONUT_DB_DORMANT}
      driver-class-name: org.mariadb.jdbc.Driver
      username: ${DOCKER_DB_USERNAME}
      password: ${DOCKER_DB_PASSWORD}
    kokonut-remove:
      url: jdbc:mariadb://${DOCKER_DB_HOST}:${DOCKER_DB_PORT}/${KOKONUT_DB_REMOVE}
      driver-class-name: org.mariadb.jdbc.Driver
      username: ${DOCKER_DB_USERNAME}
      password: ${DOCKER_DB_PASSWORD}
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
#  redis:
#    host: localhost
#    port: '6379'
  data:
    redis:
      repositories:
        enabled: false

  batch.job.names: ${job.name:NONE}

  servlet:
    multipart:
      max-file-size: 21MB
      max-request-size: 21MB

#Custom
kokonut:
  #코코넛 상태값 가져오기(로컬인지, 운영인지 구분짓기 위해 추가)
  state: ${KOKONUT_STATE}

  aws:
    # AWS S3
    s3:
      url: ${KOKONUT_AWS_S3_URL}
      bucket: ${KOKONUT_AWS_S3_BUCKET}
      access: ${KOKONUT_AWS_S3_ACCESS}
      secret: ${KOKONUT_AWS_S3_SECRET}

      # S3 버킷 폴더
      businessS3Folder: ${KOKONUT_AWS_S3_BUSINESSS3FOLDER}
      qnaS3Folder: ${KOKONUT_AWS_S3_QNAS3FOLDER}
      userprivacyS3Folder: ${KOKONUT_AWS_S3_USERPRIVACY}

    # AWS KMS
    kms:
      secret: ${KOKONUT_AWS_KMS_SECRET}
      access: ${KOKONUT_AWS_KMS_ACCESS}
      id: ${KOKONUT_AWS_KMS_ID}

  # JWT_SECRET_STRING : echo 'spring-boot-security-jwt-tutorial-jiwoon-spring-boot-security-jwt-tutorial' | base64
  jwt:
    secret: ${KOKONUT_JWT_SECRET}

  # 프론트 로컬서버
  front:
    server:
      domain: ${KOKONUT_FRONT_SERVER_DOMAIN}
      domain2: ${KOKONUT_FRONT_SERVER_DOMAIN2}

  # 로컬IP
  otp:
    hostUrl: ${KOKONUT_OTP_URL}

  # 메일주소
  mail:
    host: ${KOKONUT_MAIL_HOST}

  # iamport 관련 값
  iamport:
    key: ${KOKONUT_IAMPORT_KEY}
    secret: ${KOKONUT_IAMPORT_SECRET}

  # niceId 관련 필요한 값
  nice:
    id: ${KOKONUT_NICE_ID}
    secret: ${KOKONUT_NICE_SECRET}
    product: ${KOKONUT_NICE_PRODUCT}
    access: ${KOKONUT_NICE_ACCESS}

  # naver cloud 관련 값
  ncloud:
    serviceId: ${KOKONUT_NCLOUD_SERVICEID}
    accessKey: ${KOKONUT_NCLOUD_ACCESSKEY}
    secretKey: ${KOKONUT_NCLOUD_SECRETKEY}
    primaryKey: ${KOKONUT_NCLOUD_PRIMARYKEY}
    categoryCode: ${KOKONUT_NCLOUD_CATEGORYCODE}

  #stibee
  stibee:
    apiKey: ${KOKONUT_STIBEE_APIKEY}

  #bootpay
  bootpay:
    restKey: ${KOKONUT_BOOTPAY_REST}
    privateKey: ${KOKONUT_BOOTPAY_PRIVATE}

  #kisa
  whois:
    secretKey: ${KOKONUT_WHOIS_KEY}

  #해피톡 알림톡
  happytalk:
    userId: ${KOKONUT_HAPPYTALK_USERID}
    alimHost: ${KOKONUT_HAPPYTALK_ALIMHOST}
    bizHost: ${KOKONUT_HAPPYTALK_BIZHOST}
    profilekey: ${KOKONUT_HAPPYTALK_PROFILEKEY}

  slack:
    token: ${KOKONUT_SLACK_TOKEN}
    channel: ${KOKONUT_SLACK_CHANNEL}

  redis:
    host: ${KOKONUT_REDIS_HOST}
    port: ${KOKONUT_REDIS_PORT}
    password: ${KOKONUT_REDIS_PASSWORD}